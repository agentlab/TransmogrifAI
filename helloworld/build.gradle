plugins {
    id 'scala-common-conventions'
    id 'avro-generation-conventions'
    id 'test-common-conventions'
    id 'packaging-conventions'
    id 'spark-application-conventions'
}

repositories {
    mavenCentral()
    mavenLocal()
}

configurations {
    provided
    compileOnly.extendsFrom provided
    testImplementation.extendsFrom provided
}

//noinspection GroovyAssignabilityCheck
dependencies {
    // Spark
    provided libs.bundles.spark

    // TransmogrifAI
    implementation libs.transmogrifai.core

    // Pretrained models used in TransmogrifAI, e.g. OpenNLP POS/NER models etc. (optional)
    // compile libs.transmogrifai.models
}

wrapper {
    gradleVersion = '8.7'
    distributionType = Wrapper.DistributionType.BIN
    distributionSha256Sum = '544c35d6bd849ae8a5ed0bcea39ba677dc40f49df7d1835561582da2009b961d'
}

tasks.register('runMain', JavaExec) {
    description 'run a main class, i.e.: runMain -Dmain=MyMainClass -Dargs="arg1 arg2 arg3"'
    main = System.getProperty("main")
    classpath = sourceSets.main.runtimeClasspath
    //noinspection GroovyAssignabilityCheck
    systemProperties = System.getProperties()
    args = System.getProperty("args", "") == "" ? new LinkedList<String>() : Arrays.asList(System.getProperty("args").split(" "))
}

tasks.register('repl', JavaExec) {
    description 'Start Scala repl.'
    main = "scala.tools.nsc.MainGenericRunner"
    classpath = sourceSets.main.runtimeClasspath + configurations.scalaCompiler
    standardInput System.in
    args '-usejavacp'
}

tasks.register('classpath') {
    doLast {
        description 'Print project classpath.'
        println sourceSets.main.runtimeClasspath.asPath
    }
}
