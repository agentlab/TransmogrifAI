buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "com.github.alisiikh:gradle-scalastyle-plugin:3.5.0"
        classpath 'com.commercehub.gradle.plugin:gradle-avro-plugin:0.16.0'
        classpath 'com.adtran:scala-multiversion-plugin:2.0.4'
    }
}
plugins {
    id 'avro-generation-conventions'
    id 'test-common-conventions'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}
repositories {
    mavenLocal()
    mavenCentral()
    gradlePluginPortal()
}

apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: "com.github.alisiikh.scalastyle"
apply plugin: 'com.adtran.scala-multiversion-plugin'

apply from: 'gradle/spark.gradle'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

// The main class for the application plugin and is currently unused. Setting a dummy one.
application {
    mainClass.set("please.set.main.class.in.build.gradle")
}

ext {
    sparkVersion = '3.1.3'
    transmogrifaiVersion ='0.8.0-SNAPSHOT'
    collectionsVersion = '3.2.2'
}

//noinspection GroovyAssignabilityCheck
configurations {
    scalaLibrary
    scalaCompiler
}

//noinspection GroovyAssignabilityCheck
dependencies {
    scalaLibrary "org.scala-lang:scala-library:$scalaVersion"
    scalaCompiler "org.scala-lang:scala-compiler:$scalaVersion"
    implementation "org.scala-lang:scala-library:$scalaVersion"

    // Spark
    compileOnly "org.apache.spark:spark-core_%%:$sparkVersion"
    testImplementation "org.apache.spark:spark-core_%%:$sparkVersion"
    compileOnly "org.apache.spark:spark-mllib_%%:$sparkVersion"
    testImplementation "org.apache.spark:spark-mllib_%%:$sparkVersion"
    compileOnly "org.apache.spark:spark-sql_%%:$sparkVersion"
    testImplementation "org.apache.spark:spark-sql_%%:$sparkVersion"

    // TransmogrifAI
    implementation "com.salesforce.transmogrifai:transmogrifai-core_%%:$transmogrifaiVersion"

    // Pretrained models used in TransmogrifAI, e.g. OpenNLP POS/NER models etc. (optional)
    // compile "com.salesforce.transmogrifai:transmogrifai-models_%%:$transmogrifaiVersion"
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    resolutionStrategy {
        force "commons-collections:commons-collections:$collectionsVersion",
                "org.scala-lang:scala-library:$scalaVersion",
                "org.scala-lang:scala-reflect:$scalaVersion"
    }
}
configurations.zinc {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.scala-lang') {
            details.useVersion '2.13.11'
        }
    }
}


tasks.withType(ScalaCompile) {
    configure(scalaCompileOptions.forkOptions) {
        memoryMaximumSize = '1g'
        jvmArgs = ['-XX:MaxMetaspaceSize=256m']
    }
}
compileScala { scalaCompileOptions.additionalParameters = ["-opt:l:inline", "-opt-inline-from:**"] }
compileTestScala { scalaCompileOptions.additionalParameters = ["-Yrangepos"] }
[compileJava, compileTestJava]*.options.collect { options -> options.encoding = 'UTF-8' }

jar {
    manifest.attributes "Main-Class": "$mainClassName"
    archiveBaseName = "${rootProject.name}"
}

shadowJar {
    zip64 = true
    exclude 'META-INF/**'
    archiveBaseName = jar.baseName
    // The main class for the application plugin and is currently unused. Setting a dummy one.
    mainClassName = "please.set.main.class.in.build.gradle"

    // Concatenate modularized mleap metadata
    // https://github.com/combust/mleap/issues/656
    append 'reference.conf'
}

scalastyle {
    config = file("${rootProject.projectDir}/gradle/scalastyle-config.xml")
}
compileScala.dependsOn(scalastyleCheck)

wrapper {
    gradleVersion = '8.7'
    distributionType = Wrapper.DistributionType.BIN
    distributionSha256Sum = '544c35d6bd849ae8a5ed0bcea39ba677dc40f49df7d1835561582da2009b961d'
}

task runMain(type: JavaExec) {
    description 'run a main class, i.e.: runMain -Dmain=MyMainClass -Dargs="arg1 arg2 arg3"'
    main = System.getProperty("main")
    classpath = sourceSets.main.runtimeClasspath
    //noinspection GroovyAssignabilityCheck
    systemProperties = System.getProperties()
    args = System.getProperty("args", "") == "" ? new LinkedList<String>() : Arrays.asList(System.getProperty("args").split(" "))
}

task repl(type: JavaExec) {
    description 'Start Scala repl.'
    main = "scala.tools.nsc.MainGenericRunner"
    classpath = sourceSets.main.runtimeClasspath + configurations.scalaCompiler
    standardInput System.in
    args '-usejavacp'
}

task classpath {
    doLast {
        description 'Print project classpath.'
        println sourceSets.main.runtimeClasspath.asPath
    }
}
