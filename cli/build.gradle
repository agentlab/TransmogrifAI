plugins {
    id 'avro-generation-conventions'
    id 'application-conventions'
}

configurations {
    provided
    compileOnly.extendsFrom provided
    testImplementation.extendsFrom provided
}

dependencies {
    // scopt
    implementation libs.scopt

    // scalafmt
    implementation libs.scalafmt

    // Reflections
    implementation libs.reflections

    implementation libs.commons.io

    provided libs.bundles.spark

    implementation project(":core")

    // avro
    implementation(libs.avro.core) { exclude group: 'org.mortbay.jetty', module: 'servlet-api' }
}

ext {
    templateResourcesDir = "$project.buildDir/template-resources"
}

application {
    // Set this to the main class for cli.
    mainClass.set("com.salesforce.op.cli.CLI")
}

tasks.register('copySpark', Copy) {
    from '../templates/simple/gradle'
    into "$templateResourcesDir/templates/simple/gradle"
    // shadowJar STILL expands jars into the shadow jar.. this prevents that
    rename { String fileName ->
        fileName.replace(".jar", ".notajar")
    }
}

tasks.register('copyTools', Copy) {
    from '../templates/simple'
    into "$templateResourcesDir/templates/simple"
    include "**/gradlew"
    include "**/gradlew.bat"
    include "**/spark.gradle"
    exclude "**/*.gradle.template"
}

tasks.register('copyLocalTemplates', Copy) {
    from 'src/main/scala/com/salesforce/op/cli/gen/templates'
    into "$templateResourcesDir/templates"
    include "*Template.scala"
}

tasks.register('copyTemplates', Copy) {
    from '../templates'
    into "$templateResourcesDir/templates"
    exclude '**/*.jar'
    exclude '**/*.bat'
    exclude '**/*.iml'
    exclude '**/gradle-wrapper.properties'
    exclude 'build/'
    exclude '*/build/'
    exclude "*/.gradle/*"
    exclude "*/gradle/*"
    exclude '**/gradlew'
    exclude "**/spark.gradle"
    rename { String fileName ->
        fileName.replace(".gradle.template", ".gradle")
    }
    expand([
            version: version,
            scalaVersionFull: libs.versions.scala.get(),
            scalaVersion: libs.versions.scalaLang.get(),
            scalaTestVersion: libs.versions.scalatest.get(),
            junitPlatformVersion: libs.versions.junitPlatform.get(),
            sparkVersion: libs.versions.spark.get(),
            avroVersion: libs.versions.avro.get(),
            collectionsVersion: libs.versions.collections.get(),
            transmogrifaiVersion: version
    ])
}

sourceSets {
    main {
        resources {
            srcDir "$templateResourcesDir"
        }
    }
}

processResources.dependsOn copyTemplates, copyTools, copySpark, copyLocalTemplates

def sourcesJar = project.tasks.findByName('sourcesJar')
if (sourcesJar != null) {
  sourcesJar.dependsOn copyTemplates, copyTools, copySpark, copyLocalTemplates
  sourcesJar.duplicatesStrategy = DuplicatesStrategy.INCLUDE
}
